import { LitElement, html, css, CSSResultGroup } from "lit";
import {
  customElement,
  property,
  query,
  queryAssignedElements,
  state,
} from "lit/decorators.js";
import {
  default_params,
  base_url,
  embed_path,
  required_params,
} from "./params";
import { viewer_styles } from "./styles";
import { loaderTemplate } from "./loaderTemplate";
import React from "react";
/**
 * The sketchfab-viewer element allows authors to include dynamic 3D models from https://sketchfab.com in their documents.
 *
 * @docs https://www.npmjs.com/package/sketchfab-viewer
 *
 * @element iframe - The sketchfab-viewer contains an autogenerated iframe where the content is rendered.
 *
 * @property id - Refers to an uid of a 3D model previously uploaded in Sketchfab
 *
 * @property settings - An array of objects see docs
 *
 * @property options - ViewerOptions see docs
 *
 * @property fullScreen - Boolean
 *
 * @method updateSettings - Recives 2 params (name, arg) see docs
 *
 * @event onResponse - A custom event dispatched from sketchfab-viewer see docs
 *
 * @loader - The default loader component can be replaced see docs
 *
 * @button - Multiple buttons can be added see docs
 *
 * @example
 * <sketchfab-viewer
 *    id="my-element"
 *    uid="538f4a91fb374937833ec025eaad5589"
 *    settings='[{"name": "getMaterialList", "arguments": []}]'
 *    options="{}"
 * >
 * <!-- <div slot="loader">Loading!!!</div> -->
 * <!-- <button slot="button">Update</button> -->
 * </sketchfab-viewer>
 * <script>
 *    const element = document.getElementById("my-element")
 *    element.addEventListener("onResponse", (event) => console.log(event));
 *    element.updateSettings("getMaterialList", [])
 *  </script>
 */
@customElement("sketchfab-viewer")
export class SketchfabViewer extends LitElement {
  constructor() {
    super();
    this.uid;
  }
  @property({ type: String })
  uid = "";

  @property({ type: Array })
  settings = [];

  @property({ type: Object })
  options = {};

  @property({ type: Boolean })
  fullScreen = false;

  @query("#api_iframe")
  api_iframe!: HTMLIFrameElement;

  @queryAssignedElements({ slot: "loader" })
  _Loaders!: Array<HTMLElement>;

  @queryAssignedElements({ slot: "button" })
  _Btuttons!: Array<HTMLElement>;

  @state()
  viewr_opacity = false;

  @state()
  show_buttons = false;

  @state()
  show_loaders = true;

  protected render() {
    return html` <div
      class=${`main-container ${this.fullScreen ? "full-screen" : ""}`}
    >
      ${this.show_loaders
        ? html`<slot name="loader">${loaderTemplate()}</slot>`
        : null}

      <iframe
        src=${this._build_url()}
        id="api_iframe"
        class=${!this.viewr_opacity && "hidden"}
        allow="autoplay; fullscreen; xr-spatial-tracking"
        xr-spatial-tracking
        execution-while-out-of-viewport
        execution-while-not-rendered
        web-share
        allowfullscreen
        mozallowfullscreen="true"
        webkitallowfullscreen="true"
        @load=${() => this._init_message()}
      ></iframe>
      ${this.show_buttons ? html`<slot name="button"></slot>` : null}
    </div>`;
  }

  static styles: CSSResultGroup = [
    viewer_styles,
    css`
      :host {
        width: 100%;
      }
    `,
  ];

  firstUpdated() {
    window.addEventListener("message", (event) =>
      this._handleMessageEvent(event)
    );
  }

  protected _init_message() {
    this.api_iframe.contentWindow?.postMessage(
      { type: "api.initialize", requestId: 0, name: "1.12.1", instanceId: "1" },
      "https://sketchfab.com"
    );
  }

  protected _sendMessage = () => {
    this._showModel();
    this.settings &&
      this.settings.forEach((setting: Record<string, string>) => {
        this.api_iframe.contentWindow?.postMessage(
          {
            type: "api.request",
            instanceId: "1",
            requestId: setting.name,
            member: setting.name,
            arguments: setting.arguments,
          },
          "https://sketchfab.com"
        );
      });
  };

  protected _showModel = () => {
    this.viewr_opacity = true;
    this.show_loaders = false;
    this.show_buttons = true;
  };

  protected _handleMessageEvent = (event: MessageEvent<any>) => {
    const { data } = event;
    const options = {
      detail: { data },
      bubbles: true,
      composed: true,
    };
    data.results[0] === "viewerready" && this._sendMessage();
    data.type === "api.request.result" &&
      this.dispatchEvent(new CustomEvent("onResponse", options));
  };

  protected _build_url() {
    if (typeof this.uid !== "string")
      throw new Error("model uid must be a string");
    if (this.options) Object.assign(default_params, this.options);
    const newUrl = new URL(this.uid + embed_path, base_url);
    Object.keys(required_params).forEach((param) => {
      newUrl.searchParams.append(param, required_params[param]);
    });
    Object.keys(default_params).forEach((param) => {
      newUrl.searchParams.append(param, default_params[param]);
    });
    return newUrl.href;
  }
  public updateSettings(name: string, arg: []) {
    this.api_iframe.contentWindow?.postMessage(
      {
        type: "api.request",
        instanceId: "1",
        requestId: name,
        member: name,
        arguments: arg,
      },
      "https://sketchfab.com"
    );
  }
}

export const ReactSketchfabViewer = React.createElement("sketchfab-viewer");

declare global {
  interface HTMLElementTagNameMap {
    "sketchfab-viewer": SketchfabViewer;
  }
}
