import { LitElement, CSSResultGroup } from "lit";
/**
 * The sketchfab-viewer element allows authors to include dynamic 3D models from https://sketchfab.com in their documents.
 *
 * @docs https://www.npmjs.com/package/sketchfab-viewer
 *
 * @element iframe - The sketchfab-viewer contains an autogenerated iframe where the content is rendered.
 *
 * @property id - Refers to an uid of a 3D model previously uploaded in Sketchfab
 *
 * @property settings - An array of objects see docs
 *
 * @property options - ViewerOptions see docs
 *
 * @property fullScreen - Boolean
 *
 * @method updateSettings - Recives 2 params (name, arg) see docs
 *
 * @event onResponse - A custom event dispatched from sketchfab-viewer see docs
 *
 * @loader - The default loader component can be replaced see docs
 *
 * @button - Multiple buttons can be added see docs
 *
 * @example
 * <sketchfab-viewer
 *    id="my-element"
 *    uid="538f4a91fb374937833ec025eaad5589"
 *    settings='[{"name": "getMaterialList", "arguments": []}]'
 *    options="{}"
 * >
 * <!-- <div slot="loader">Loading!!!</div> -->
 * <!-- <button slot="button">Update</button> -->
 * </sketchfab-viewer>
 * <script>
 *    const element = document.getElementById("my-element")
 *    element.addEventListener("onResponse", (event) => console.log(event));
 *    element.updateSettings("getMaterialList", [])
 *  </script>
 */
export declare class SketchfabViewer extends LitElement {
    constructor();
    uid: string;
    settings: never[];
    options: {};
    fullScreen: boolean;
    api_iframe: HTMLIFrameElement;
    _Loaders: Array<HTMLElement>;
    _Btuttons: Array<HTMLElement>;
    viewr_opacity: boolean;
    show_buttons: boolean;
    show_loaders: boolean;
    protected render(): import("lit-html").TemplateResult<1>;
    static styles: CSSResultGroup;
    firstUpdated(): void;
    protected _init_message(): void;
    protected _sendMessage: () => void;
    protected _showModel: () => void;
    protected _handleMessageEvent: (event: MessageEvent<any>) => void;
    protected _build_url(): string;
    updateSettings(name: string, arg: []): void;
}
declare global {
    interface HTMLElementTagNameMap {
        "sketchfab-viewer": SketchfabViewer;
    }
}
export declare const SketchfabViewerReact: import("@lit-labs/react").ReactWebComponent<SketchfabViewer, {
    updateSettings: string;
}>;
